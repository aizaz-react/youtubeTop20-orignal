"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixPushStateListeners = exports.pushStateEventName = void 0;
var pushStateEventName = '_fathomStatechange';
exports.pushStateEventName = pushStateEventName;
var hasRunFixPushState = false;
/**
 * Adds events for all pushState/etc methods. This mutates the window object, so it will only ever run once.
 */

var fixPushStateListeners = function fixPushStateListeners() {
  if (typeof window === 'undefined' || hasRunFixPushState) return; // eslint-disable-next-line no-undef

  var _window = window,
      history = _window.history,
      dispatchEvent = _window.dispatchEvent;
  /**
   * Intercepts a pushState/etc method and dispatches our custom event.
   *
   * @param {Function} originalMethod The original pushState/etc method to intercept.
   * @returns {Function} New method.
   */

  var interceptMethod = function interceptMethod(originalMethod) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var output = originalMethod.apply(history, args); // eslint-disable-next-line no-undef

      dispatchEvent(new Event(pushStateEventName));
      return output;
    };
  };

  history.pushState = interceptMethod(history.pushState);
  history.popState = interceptMethod(history.popState);
  history.replaceState = interceptMethod(history.replaceState);
  hasRunFixPushState = true;
};

exports.fixPushStateListeners = fixPushStateListeners;