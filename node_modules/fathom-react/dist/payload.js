"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

/**
 * Gets the canonical location for the current page, if set, or returns window.location.
 *
 * @returns {object} window.location-like object.
 */
var findCanonicalLocation = function findCanonicalLocation() {
  // eslint-disable-next-line no-undef
  var _window = window,
      document = _window.document,
      location = _window.location;
  var cLink = document.querySelector('link[rel="canonical"][href]');

  if (cLink) {
    var link = document.createElement('a');
    link.href = cLink.href;
    return link;
  }

  return location;
};
/**
 * Gets the external referrer. Returns null if the referrer is from the same hostname.
 *
 * @param {string} hostname Current hostname
 * @returns {string} Referrer. Empty-string if no referrer is found, or the referrer is internal.
 */


var getReferrer = function getReferrer(hostname) {
  // eslint-disable-next-line no-undef
  var _window2 = window,
      document = _window2.document;

  if (document.referrer.indexOf(hostname) < 0) {
    return document.referrer;
  }

  return '';
};
/**
 * Gets the user's timezone.
 *
 * @returns {string} The user's timezone.
 */


var getTz = function getTz() {
  return (// eslint-disable-next-line no-undef
    window.Intl.DateTimeFormat().resolvedOptions().timeZone
  );
};
/**
 * Encodes the data for the request.
 *
 * @param {object} data Data to encode.
 * @returns {string} Encoded data.
 */


var encodeData = function encodeData(data) {
  return (// eslint-disable-next-line prefer-template
    '?' + Object.keys(data).map(function (i) {
      return "".concat(encodeURIComponent(i), "=").concat(encodeURIComponent(data[i]));
    }).join('&')
  );
};
/**
 * Creates a function which takes an event name and event data, and sends it to Fathom.
 *
 * @param {string} trackerUrl Fathom tracker base URL.
 * @param {string} siteId Fathom site ID.
 * @returns {Function} Function taking eventName and data, and sending the result to Fathom.
 */


var sendPayloadFactory = function sendPayloadFactory(trackerUrl, siteId) {
  return function (eventName, data) {
    // Verify we're not rendering in the server
    if (typeof window === 'undefined') return; // eslint-disable-next-line no-undef

    var _window3 = window,
        navigator = _window3.navigator,
        document = _window3.document; // Verify we should be sending events for this user

    if (/bot|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex/i.test(navigator.userAgent)) return;
    if ('visibilityState' in document && document.visibilityState === 'prerender') return; // Schedule future event if the document has not loaded (not sure if this is necessary in React but it was in the
    // original fathom.js library so here it is)

    if (document.body === null) {
      document.addEventListener('DOMContentLoaded', function () {
        return sendPayloadFactory(trackerUrl, siteId)(eventName, data);
      });
    } // Build the payload


    var location = findCanonicalLocation();
    var hostname = "".concat(location.protocol, "//").concat(location.hostname);
    var referrer = getReferrer(hostname);
    var postdata = {
      p: data.path || location.pathname + location.search,
      h: data.hostname || hostname,
      r: data.referrer || referrer,
      sid: siteId,
      tz: getTz()
    }; // Send goal payload, this is in a beacon so it can continue if the page navigates

    if (eventName === 'goal') {
      postdata.gcode = data.gcode;
      postdata.gval = data.gval || '0';
      navigator.sendBeacon("".concat(trackerUrl, "/").concat(encodeData(postdata)));
      return;
    } // Send other payloads


    var element = document.createElement('img');
    element.setAttribute('alt', '');
    element.setAttribute('aria-hidden', 'true');
    element.style.position = 'absolute';
    element.style.top = '-100px';
    element.style.left = '-100px';
    element.src = "".concat(trackerUrl, "/").concat(encodeData(postdata));
    element.addEventListener('load', function () {
      return element.parentNode.removeChild(element);
    });
    element.addEventListener('error', function () {
      return element.parentNode.removeChild(element);
    });
    document.body.appendChild(element);
  };
};

var _default = sendPayloadFactory;
exports["default"] = _default;