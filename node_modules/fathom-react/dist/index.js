"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Fathom;
Object.defineProperty(exports, "useFathom", {
  enumerable: true,
  get: function get() {
    return _context.useFathom;
  }
});

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = require("./context");

var _payload = _interopRequireDefault(require("./payload"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _utils.fixPushStateListeners)();
var defaultDomain = 'collect.usefathom.com';
/**
 * Provides a Fathom context for your app.
 *
 * @param {object} props                      React params.
 * @param {string=} props.customDomain        Custom Fathom domain, if configured. This will improve metrics.
 * @param {string=} props.siteId              Fathom site ID, usually 6 uppercase letters.
 * @param {boolean=} props.noPageviews        Disables automatic sending of pageview events to Fathom.
 * @param {object[]} props.children           Children to recieve Fathom context. This is usually your whole app.
 *
 * @returns {object[]}                        React render.
 */

function Fathom(_ref) {
  var customDomain = _ref.customDomain,
      siteId = _ref.siteId,
      noPageviews = _ref.noPageviews,
      children = _ref.children;
  var sendPayload = (0, _payload["default"])("https://".concat(customDomain || defaultDoain), siteId);
  var fathomWrapper = {
    pageView: function pageView(path, data) {
      return sendPayload('pageview', _objectSpread({
        path: path
      }, data || {}));
    },
    goal: function goal(goalId, cost, data) {
      return sendPayload('goal', _objectSpread({
        gcode: goalId,
        gval: cost
      }, data || {}));
    }
  };
  /**
   * Runs whenever the page is changed from a pushstate/etc and sends the Fathom event.
   */

  var onChange = function onChange() {
    if (!noPageviews) sendPayload('pageview', {});
  };

  (0, _react.useEffect)(function () {
    if (typeof window === 'undefined') return function () {};
    window.addEventListener(_utils.pushStateEventName, onChange);
    if (!noPageviews) sendPayload('pageview', {});
    return function () {
      return window.removeEventListener(_utils.pushStateEventName, onChange);
    };
  }, [typeof window === "undefined" ? "undefined" : _typeof(window), noPageviews, customDomain, siteId]);
  return /*#__PURE__*/_react["default"].createElement(_context.FathomContext.Provider, {
    value: fathomWrapper
  }, children);
}

Fathom.displayName = 'Fathom';
Fathom.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].element), _propTypes["default"].element]).isRequired,
  siteId: _propTypes["default"].string.isRequired,
  customDomain: _propTypes["default"].string,
  noPageviews: _propTypes["default"].bool
};
Fathom.defaultProps = {
  customDomain: defaultDomain,
  noPageviews: false
};